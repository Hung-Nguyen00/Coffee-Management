"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import environ 
from datetime import timedelta
from django.utils.translation import ugettext_lazy as _

from .logging import LOGGING  # noqa
from .storage import *  # noqa
from .swagger import SWAGGER_SETTINGS  # noqa



env = environ.Env()
env.read_env()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = environ.Path(__file__) - 3

BASE_URL = env("BASE_URL", default="http://localhost")
FRONTEND_URL = env("FRONTEND_URL", default="http://localhost")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "DJANGO_SECRET_KEY",
    default="django-insecure-sqz@lqcjpxeqptxz#y(wkx*+*60jdx&&(y3z(l+xkh*cri5wh&",
)

ENVIRONMENT = env.str("ENVIRONMENT", default="production")
APP_NAME = env.str("APP_NAME", default="my-app")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOSTS", default="*")


# Application definition

DJANGO_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
)
THIRD_PARTY_APPS = (
    "rest_framework",
    # Auth
    "rest_framework.authtoken",
    "oauth2_provider",
    "rest_auth",
    # Registration
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "rest_auth.registration",
    # social auth
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.twitter",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.linkedin_oauth2",
    "allauth.socialaccount.providers.apple",
    # CORS
    "corsheaders",
    # Swagger
    "drf_yasg",
    # Celery
    "django_celery_beat",
    "django_celery_results",
    # user-agent
    "django_user_agents",
    # otp
    "django_otp",
    "django_otp.plugins.otp_totp",
    # health check
    "health_check",
    "health_check.contrib.celery",
    "health_check.db",
    "health_check.cache",
    "health_check.storage",
    # filters
    "django_filters",
    "django_property_filter",
    # tags
    "taggit",
    # django-role-permissions
    "rolepermissions",
    "fcm_django",
)

LOCAL_APPS = (
    "apps.core.apps.CoreConfig",
    "apps.users.apps.UserConfig",
     "apps.social_auth.apps.SocialAuthConfig",
    "apps.users_auth.apps.UsersAuthConfig",
    "apps.uploads.apps.UploadsConfig",
    "apps.otp_auth.apps.OtpConfig",
    "apps.staff.apps.StaffConfig",
    "apps.notification.apps.NotificationConfig",
    "apps.equipments.apps.EquipmentsConfig",
    "apps.orders.apps.OrdersConfig",
)

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "oauth2_provider.middleware.OAuth2TokenMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
]

# Auth model
AUTH_USER_MODEL = "users.User"

#route
ROOT_URLCONF = 'config.urls'

#template
TEMPLATES_ROOT = str(ROOT_DIR("templates"))
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_ROOT],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": env.db("DATABASE_URL")
}
DATABASES["default"]["ATOMIC_REQUESTS"] = True
DATABASES["default"]["CONN_MAX_AGE"] = env.int("CONN_MAX_AGE", default=60)

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Media
MEDIA_ROOT = env.str("MEDIA_ROOT", default=str(ROOT_DIR("media")))
MEDIA_URL = env("MEDIA_URL", default="/media/")

FILE_UPLOAD_PERMISSIONS = 0o644


REST_FRAMEWORK = {
    "COERCE_DECIMAL_TO_STRING": False,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        "apps.users_auth.authentication.CustomJWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        'rest_framework.permissions.IsAuthenticated',
        # "apps.otp_auth.permissions.IsOtpVerified",
        # "apps.users.permissions.IsAdminSuperUser",
    ),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # LimitOffsetPagination
    "DEFAULT_PAGINATION_CLASS": "apps.core.pagination.StandardResultsSetPagination",  # LimitOffsetPagination
    "PAGE_SIZE": env.int("PAGE_SIZE", 20),
    "PAGINATE_BY_PARAM": "page_size",  # Allow client to override, using `?page_size=xxx`.
    "MAX_PAGINATE_BY": 500,  # Maximum limit allowed when using `?page_size=xxx`.
    # 'DATE_INPUT_FORMATS': ['YYYY-MM-DD HH:MM:SS'],
    "EXCEPTION_HANDLER": "apps.core.exception_handler.api_exception_handler",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# Rest Auth - Change password
OLD_PASSWORD_FIELD_ENABLED = True

REST_AUTH_REGISTER_SERIALIZERS = {"REGISTER_SERIALIZER": "apps.users.api.serializers.UserRegisterSerializer"}

REST_AUTH_SERIALIZERS = {
    "PASSWORD_RESET_SERIALIZER": "apps.users.api.serializers.UserPasswordResetSerializer",
    # "LOGIN_SERIALIZER": "apps.users.api.serializers.UserLoginSerializer",
    "PASSWORD_CHANGE_SERIALIZER": "apps.users.api.serializers.UserPasswordChangeSerializer",
    "PASSWORD_RESET_CONFIRM_SERIALIZER": "apps.users.api.serializers.UserPasswordResetConfirmSerializer",
    "TOKEN_SERIALIZER": "apps.otp_auth.api.serializers.TwoFactorTokenObtainPairSerializer",
}

# whether or not cookies will be allowed to be included in cross-site HTTP requests
CORS_ALLOW_CREDENTIALS = True

# Allow CORS requests from all domain
# Should use CORS_ALLOWED_ORIGINS to whitelist domain instead
CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_HEADERS = (
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "device-id",
    "client-id",
    "app-version",
)

# SOCIALACCOUNT_CALLBACK_URL = env("SOCIALACCOUNT_CALLBACK_URL", default="http://localhost")

# SOCIALACCOUNT_ADAPTER = "apps.social_auth.adapter.SocialAccountAdapter"
ACCOUNT_ADAPTER = "apps.users_auth.adapter.AccountAdapter"

SOCIALACCOUNT_CALLBACK_URL = env("SOCIALACCOUNT_CALLBACK_URL", default="http://localhost")


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#  Celery
BROKER_URL = env("CELERY_BROKER_URL", default="django://")
CELERYD_MAX_TASKS_PER_CHILD = 100
CELERYD_TASK_SOFT_TIME_LIMIT = 2400  # 40 minutes
CELERY_RESULT_BACKEND = "django-db"
CELERY_IGNORE_RESULT = False

# AUTH settings
PASSWORD_MIN_LENGTH = 8

# Reset Password OTP expire time (second). Default is 30 minutes
RESET_PASSWORD_OTP_EXPIRE_TIME = 1800
TESTING_RESET_PASSWORD_OTP = 123456

# Socket IO Emitter
REDIS_CONN_URL = env.str("REDIS_CONN_URL", default="redis://localhost:6379")
# SOCKET_IO_EMITTER_KEY = env.str("SOCKET_IO_EMITTER_KEY", default="SOCKET_IO_EMITTER_KEY")
# BROADCAST_CHANNEL = env.str("BROADCAST_CHANNEL", "BROADCAST_CHANNEL")

FAKE_EMAIL_FORMAT = env.str("FAKE_EMAIL_FORMAT", default="mailfake@goldfish.com")

# Simple JWT
EXPIRED_TOKEN_MINUTES = env.int("EXPIRED_TOKEN_MINUTES", default=200)
EXPIRED_REFRESH_DAYS = env.int("EXPIRED_REFRESH_DAYS", default=30)

JWT_PUBLIC_KEY_PATH = env.str("JWT_PUBLIC_KEY_PATH", default="jwt_api_key.pub")
JWT_PRIVATE_KEY_PATH = env.str("JWT_PRIVATE_KEY_PATH", default="jwt_api_key")

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=EXPIRED_TOKEN_MINUTES),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=EXPIRED_REFRESH_DAYS),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "RS256",
    "SIGNING_KEY": open(JWT_PRIVATE_KEY_PATH).read(),
    "VERIFYING_KEY": open(JWT_PUBLIC_KEY_PATH).read(),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

DEFAULT_ERROR_MESSAGE = _("An error has occurred")

# NEW FEEDS
USE_REDIS = os.environ.get("USE_REDIS", default="yes")

CELERY_ACCEPT_CONTENT = ["json", "pickle"]

# Registration
SITE_ID = 1
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD_EMAIL = "email"
ACCOUNT_AUTHENTICATION_METHOD_USERNAME = "username"
ACCOUNT_EMAIL_VERIFICATION_MANDATORY = "mandatory"

# Mailer
SENDGRID_API_KEY = env("SENDGRID_API_KEY", default="")
ACCOUNT_EMAIL_VERIFICATION = env("ACCOUNT_EMAIL_VERIFICATION", default="none")
EMAIL_BACKEND = env(
    "DJANGO_EMAIL_BACKEND",
    default="django.core.mail.backends.smtp.EmailBackend",
)
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
DEFAULT_FROM_EMAIL = env("DJANGO_DEFAULT_FROM_EMAIL", default="")
ACCOUNT_EMAIL_SUBJECT_PREFIX = env("ACCOUNT_EMAIL_SUBJECT_PREFIX", default="")
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = env.int("EMAIL_CONFIRMATION_EXPIRE_DAYS", default=3)
